version: "3.9"

services:
  client:
    build:
      context: .
      dockerfile: Dockerfile.client
      args:
        CLIENT_PORT: ${CLIENT_PORT}
    restart: always
    ports:
      - "${CLIENT_PORT}:80"
    environment:
      - CLIENT_PORT=${CLIENT_PORT}
      - SERVER_PORT=${SERVER_PORT}

  app:
    build:
      context: .
      dockerfile: Dockerfile.server
      args:
        SERVER_PORT: ${SERVER_PORT}
    restart: always
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    environment:
      SERVER_PORT: ${SERVER_PORT}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      NODE_ENV: production
    networks:
      - networkApp
    depends_on:
      - postgres

  postgres:
    image: postgres:14-alpine
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: trust
    hostname: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    networks:
      - networkApp
  
  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      POSTGRES_HOST_AUTH_METHOD: trust
    expose:
      - "80"
    ports:
      - "8080:80"
    restart: always
    volumes:
      - pg-admin-data:/var/lib/pgadmin
    networks:
      - networkApp

networks:
  networkApp:
    driver: bridge

volumes:
  pgdata:
  pg-admin-data:
